// 1. In your own words, explain what clean code is and why it is important.
//  Clean code is a way to write code so that it is as reusable as possible and that any developer can come in after you and have a quick understanding of what each section is supposed to do. It also helps with debugging, as you can walk through your thought process and refer back to your clean code while writing the programs, and making changes when your code deviates.

// 2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

//  Nuclear Power. Ensuring the code is correct would be paramount, as most of the processes are run by computers. A failure in the code would result in a catastrophic failure of the system and could potentially cause another Chernobyl, irradiating the environment around it for decades to come. See Fukushima. https://www.reuters.com/article/us-alaska-fukushima/fukushima-contaminants-found-as-far-north-as-alaskas-bering-strait-idUSKCN1R90BV


// 3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

No, too many notes, not clear on function name

FUNCTION convertTemp(temp, tempType)
 IF tempType = "F" THEN               // Check if tempType is equal "F" or "C"
  SET tempConv to (tempâˆ’32) * (5/9)
    PRINT tempConv
 ELSE IF tempType = "C" THEN
  SET tempConv to temp * 1.8000 + 32.00
 PRINT tempConv
 END IF
END FUNCTION


// 4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

yes, the naming conventions are on point, and the code is only nested twice, and you can tell what it's supposed to do.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION


// 5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.


  a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

Refactor:

FUNCTION price(subTotal, discountRate)
  RETURN "Only " + (subtotal * discountRate)
END FUNCTION

FUNCTION total(price, tax)
  RETURN "Your Total is " + price + (price * tax)
END FUNCTION

FUNCTION processPayment (amount, total)
  IF paymentType = 'CASH' THEN
      PRINT "Change due: " + amount - total
  ELSE IF paymentType = 'CREDIT CARD' THEN
      CALL getPayment RETURNING amount
      PRINT "Your credit card has been charged: " + total
  END IF
END FUNCTION


  b. The following function checks out a book if there are no issues with the guest's account.

Refactor:

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


  c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION


CLASS Offers

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

-----------------------------------------------------------------
Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

// 6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

function Square(array){
 let sum = 0;
  for (var i = 0; i < array.length; i++){
    sum += array[i];
  }
  if (sum > 0 && Math.sqrt(sum) % 1 === 0){
    return(Math.sqrt(sum));
  } else {
    return sum;
  }
}
var numbers = [1,2,3,4,5,6,7,8];
Square(numbers);


// 7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

var findDuplicate = function(array) {
  for(var i = 0; i <= array.length; i++) {
    for(var j = i; j <= array.length; j++) {
      if(i != j && array[i] == array[j]) {
        return true;
      }
    }
  }
  return false;
}
